Three File tables

One per process file descriptor table
	Contains file descriptor pointers indexed using fd numbers
	fd pointers point to entry in Open file table
	
System wide Open File Table
	Each entry contains
		reference count = number of processes (children) referring to the file
			Each process opening the file creates separate entry 
		inode table index

System wide Inode table in the superblock
	File name mapped to inode number and starting logical address
	Maps byte offsets to logical block numbers
	for eg:- 11033rd byte in the file assuming block size is 4096 bytes
		11033/4096 = 2 so second block (block number obtained using inode struct of file)


Disk space is allocated in blocks which might lead to internal fragmentation (some space of last block goes to waste)

Use indexing (dense or sparse) to keep track of file blocks

Inode:-
	Inode structure exists in all file system. But the block address allocation methods vary.
	FAT32 - linked list of blocks
	Directories are files that contain filename string and inode number pairs
	Superblock of the system contains starting logical address (block number) of the file mapped to an inode number
	When we delete file we set its inode number to zero so we cannot access a file but it is still there
	When we perform deletion and creation of files repeatedly, inode numbers are not allocated contiguously
	This is why search time increases and system performance deteriorates gradually
	This is why we use temp folder (/tmp) which can be repaired
	All inodes are collected in inode table
	Fields:-
		struct dinode
		{ ushort  di_mode;     /* mode (permissions) and type of file  (eg:- directory, socket, named pipe) */
		  short   di_nlink;    /* number of links to file */
		  ushort  di_uid;      /* owner's user id         */
		  ushort  di_gid;      /* owner's group id        */
		  off_t   di_size;     /* number of bytes in file (file size) */
		  char    di_addr[39]; /* disk block addresses    */
		  char    di_gen;      /* file generation number  */
		  time_t  di_atime;    /* time last accessed      */
		  time_t  di_mtime;    /* time last modified      */
		  time_t  di_ctime;    /* time created            */
		};
		
		Here Block addresses are actually block numbers
		40 address bytes:-
			13 addresses of 3 bytes each and last byte is file generation number
			File generation number is used to generate inode numbers
			Assume blok size is 1kb
			For a file of 10kb, first 10 addresses store address of each block
			For file greater than 10 kb:
				A single indirect disk block (of size 1kb) is used record more block addresses (256 * 4 bytes)
				11th block address is used to store the address of single indirect block (single indirect address)
				Total file size possible is 266kb
			For file that is even bigger
				use 12th address
				double indirect block address
				We store address to 256 single indirect blocks
				File size becomes 64mb
			Even further
				use 13th address
				triple indirect block address
				File size is 16gb
				
Directory:
	Special file that contains directory entries (structure containing filename and inode number and all info obtained in ls)
	Max number of files in a directory = max possible file size (since directory itself is a file) / size of directory entry
				
Creation of a file:
	Allocate an inode(first available)
	Mark flags(type, permission)
	Update size, dates
	Add entry for file in parent directory
	Update inode of Parent directory

Editing a file:
	Allocate a block
	Zero out the block
	Write to the block
	update the file's inode
	
Remove a file:
	Zero out the directory entry in parents's data block
	update the parent dir inode
	mark file's inode to free
	update free block bitmap to mark file's data block free
	
Syncronisation:
	OS reads the data blocks from disk to buffer cache
	Assume multiple threads want to create a file:
		We will need 4 locks (busy bit locks per buffer) one by one:
			cache containing block free inode numbers
			cache containing block of inode of the new file
			cache containing block of the directory entry of the file
			cache containing block of inode of the parent directory
		Acquire Global cache lock to set the busy bit locks
		Take inode locks before block locks to maintain consistency
				
Disaster Recovery:
	Ordering the operations (limit the type of inconsistencies)
		This can cause cycle of dependencies
			mv a/file b/file
			mv b/foo a/foo
			dependency cycle on which block to flush first
		If dependency cycle detected, flush blocks then move to next operation
	Logging (atomic w.r.t power failure)
		Maintain a log file
		Log each write before any flushing
		Append commit record to log
		Then Asynchronously flush writes
		If failure occurs during asyncronous writing
			Start applying the Log from the beginning again during recovery (write ahead)
		Problems:
			2x writes
			for small operation, large log overhead
			eager write to the log
			Common log across filesystem is bad for multiple users
		EXT3 filesystem:
			One transaction contains writes for any number of processes during a time interval
			This alone amortizes all problems
			Multiple writes to the same block gets absorbed by the cache
			Fixed size log with wraparound
			Initial section of log (superblock) contains metadata (file offset for start of transaction, transaction sequence no.)
			Log contains:
				descriptor block(block no., transaction sequence no., magic no.(verify valid block from garbage))
				data block(data)
				commit block(trans seq no., magic no.)
			Recovery:
				Scan log superblock to get offset, seq#
				Scan forward till some other seq#/magic# encountered
				Flush
			Only one transaction modifies buffers at a time (others wait)
			If somebody wants to modify buffer while it is being flushed, copy on write(versioning)
			
Efficiency:
	Disk Defragmentor for aligning blocks of same file in proximity

System Calls :-
	open(path, mode) is used to add file to open files table using file descriptor as an index
		mode is matched against permission
	close(fd) closes a file by freeing the file descriptor
	
